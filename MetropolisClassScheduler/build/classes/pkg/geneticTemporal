//Clase RoomScheme - Cromosoma
/*
* float fitness
* RoomScheme scheme -  Subjects
* Implementar comparator
*/

int population;
int crosspoints;
float crosspointProb;
float mutationProb;

//Schedule matriz [3][2]
void fitnessCalc(Schedule schedule){
	ArrayList<RoomScheme> chromoList = new ArrayList<RoomScheme>();
	for(int a=0; a<schedule.length; a++){
		
		RoomScheme chromoA = schedule[0][0];
		RoomScheme chromoB = schedule[0][1];
		RoomScheme chromoC = schedule[1][0];
		RoomScheme chromoD = schedule[1][1];
		RoomScheme chromoE = schedule[2][0];
		RoomScheme chromoF = schedule[2][1];
		
		
		chromoA.setFitness(checkFitness(chromoA));
		chromoB.setFitness(checkFitness(chromoB));
		chromoC.setFitness(checkFitness(chromoC));
		chromoD.setFitness(checkFitness(chromoD));
		chromoE.setFitness(checkFitness(chromoE));
		chromoF.setFitness(checkFitness(chromoF));
		
		chromoList.add(chromoA);
		chromoList.add(chromoB);
		chromoList.add(chromoC);
		chromoList.add(chromoD);
		chromoList.add(chromoE);
		chromoList.add(chromoF);
	}
	
	Collections.sort(chromoList, comparator); //Por implementar el comparator
}

//Pediente por arreglar, seleccion por torneo

void selection(ArrayList<RoomScheme> chromoList){
	RoomScheme auxChromo, crossChromoA, crossChromoB;
	float fitnessSum = 0;
	float randomChromo;
	Iterator<RoomScheme> itr;
	ListIterator<RoomScheme> litr;
	
	litr = chromoList.listIterator();
	while(litr.hasNext()){
		auxChromo = litr.next();	
		fitnessSum = fitnessSum + auxChromo.fitness();
		auxChromo.fitness = fitnessSum;
		litr.set(auxChromo);
	}
	
	for(int a=0; a<int(chromoList.size/2); a++){
		
		if(a==0){
			//Escoja el mejor tal cual
		}
		else{
			randomChromo = Math.random();
			itr = chromoList.iterator();
			while(itr.hasNext){
				auxChromo = itr.next();
				if(auxChromo.fitness>randomChromo){
					crossChromoA = auxChromo;
				}
			}
			
			randomChromo = Math.random();
			itr = chromoList.iterator();
			while(itr.hasNext){
				auxChromo = itr.next();
				if(auxChromo.fitness>randomChromo){
					crossChromoB = auxChromo;
				}
			}
			
			//AÃ±adir nuevo cromosoma a solucion
			crossover(crossChromoA,crossChromoB);
		}
	}
}

void mutation(Schedule[][] schedule){
	float mutationChance;
	for(int a=0; a<3; a++){
		for(int b=0; b<2; b++){
			mutationChance = Math.random();
			if(mutationProb>mutationChance){
				RoomScheme chromo = schedule[a][b];
				//Muta
			}
		}
	}
}

RoomScheme crossover(RoomScheme chromoA, RoomScheme chromoB){
	return childChromo;
}

float checkFitness(RoomScheme chromo){
    Subject subject;
    int fitness = 0;
    ArrayList<Subject> subjectsChecked = new ArrayList<Subject>();
    //Check conditions for 1 Subjects
    for(int a=0; a<5; a++){
      for(int b=0; b<6; b++){
	subject = chromo.rooms[a][b];
	fitness =+ 1-(checkHours(chromo, subject.getCode())+checkRepeat(chromo, subject.getCode(), a)+checkConsecutives(chromo, subject.getCode(), a));                
      }
    }
    return fitness:
}

int checkHours(RoomScheme chromo, int code){
  int counter=0;
  for(int a=0; a<5; a++){
    for(int b=0; b<6; b++){
      if(chromo.rooms[a][b].getCode() == code){
	counter++;
      }
    }
  }
  return counter;
}

int checkRepeat(RoomScheme chromo, int code, int day){
  int counter=0;
  for(int a=0; a<6; a++){
    if(chromo.rooms[day][a].getCode() == code){
      counter++;
    }
  }
  return counter;
}

int checkConsecutives(RoomScheme chromo, int code, int day){
  int counter=0;
  
  switch(dayPresent){
    case 0:
      for(int a=0; a<6; a++){
	if(chromo.rooms[4][a].getCode() == code || chromo.rooms[1][a].getCode() == code){
	  counter++;
	}
      }
    break;
    
    case 1:
      for(int a=0; a<6; a++){
	if(chromo.rooms[0][a].getCode() == code || chromo.rooms[2][a].getCode() == code){
	  counter++;
	}
      }
    break;
    
    case 2:
      for(int a=0; a<6; a++){
	if(chromo.rooms[1][a].getCode() == code || chromo.rooms[3][a].getCode() == code){
	  counter++;
	}
      }
    break;
    
    case 3:
      for(int a=0; a<6; a++){
	if(chromo.rooms[2][a].getCode() == code || chromo.rooms[4][a].getCode() == code){
	  counter++;
	}
      }
    break;
    
    case 4:
      for(int a=0; a<6; a++){
	if(chromo.rooms[3][a].getCode() == code || chromo.rooms[0][a].getCode() == code){
	  counter++;
	}
      }
    break;
  }
  return counter;
}

float normalize(Crhomo chromo){
	//Normalize fitness
	for(int a=0; a<5; a++){
		maxFitness = maxFitness + fitnessRoomA[a] +  fitnessRoomB[a];
	}
	
	for(int a=0; a<5; a++){
		fitnessRoomA[a] = fitnessRoomA[a]/maxFitness;
		fitnessRoomB[a] = fitnessRoomB[a]/maxFitness;
	}
}